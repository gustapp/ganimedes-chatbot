import { dialogflowFirebaseFulfillment } from "../src/index";
import {} from "ts-jest";

import * as chai from "chai";
const expect = chai.expect;

import * as request from 'supertest';

const url = 'http://localhost:8010/ganimedes-d9ecd/us-central1';

describe("POST /dialogflowFirebaseFulfillment - fulfillment function endpoint", ()=> {

    /**
     * @user Oi
     * @ganimedes Hello! Lets chat üî•
     */
    it("Welcome: Should return greeting: `Hello! Lets chat üî•`", () => {

        const welcomeReq = require('./mock/welcome.json');

        return request(url).post('/dialogflowFirebaseFulfillment')
            .send(welcomeReq)
            .expect(200)
            .expect(response => {
                expect(response.text)
                    .to.be.equal(`{"fulfillmentText":"Hello! Lets chat üî•","outputContexts":[]}`);
        });
    });

    /**
     * @user MAT3458 eh interessante?
     * @ganimedes A disciplina MAT3458 - √Ålgebra Linear II possui a seguinte descri√ß√£o: ...
     */
    it("GetCourseInfo: Should return course description for course", () => {

        const getCourseInfoReq = require('./mock/getCourseInfo.json');

        return request(url).post('/dialogflowFirebaseFulfillment')
            .send(getCourseInfoReq)
            .expect(200)
            .expect(response => {
                expect(response.text)
                    .to.be.equal(`{"fulfillmentText":"A disciplina MAT3458 - √Ålgebra Linear II possui a seguinte descri√ß√£o: Espa√ßos vetoriais com produto interno, transforma√ß√µes lineares, autovalores e autovetores e diagonaliza√ß√£o de operadores lineares. Mostrar como os m√©todos destes t√≥picos da √Ålgebra Linear s√£o importantes para a √°rea de engenharia, com aplica√ß√µes interessantes e motivadoras.","outputContexts":[]}`);
        });
    });

    /**
     * @user MAT3458 tem quantos creditos?
     * @ganimedes S√£o 4 cr√©ditos aula e 0 cr√©ditos trabalho
     */
    it("GetCourseCredit: Should return course credits for course", () => {

        const getCourseCreditReq = require('./mock/getCourseCredit.json');

        return request(url).post('/dialogflowFirebaseFulfillment')
            .send(getCourseCreditReq)
            .expect(200)
            .expect(response => {
                expect(response.text)
                    .to.be.equal(`{"fulfillmentText":"S√£o 4 cr√©ditos aula e 0 cr√©ditos trabalho","outputContexts":[]}`);
        });
    });

    /**
     * @user Quais os requisitos de MAT3458?
     * @ganimedes A disciplina n√£o possui requisitos!
     */
    it("GetCourseRequirements: Should return no requirements for course", () => {

        const getCourseRequirementsReq = require('./mock/getCourseRequirements-empty.json');

        return request(url).post('/dialogflowFirebaseFulfillment')
            .send(getCourseRequirementsReq)
            .expect(200)
            .expect(response => {
                expect(response.text)
                    .to.be.equal(`{"fulfillmentText":"A disciplina n√£o possui requisitos!","outputContexts":[]}`);
        });
    });

    /**
     * @user Qual a carga de MAT3458?
     * @ganimedes A disciplina possui 60 horas por semestre!
     */
    it("GetCourseWorkload: Should return workload for course", () => {

        const getCourseWorkloadReq = require('./mock/getCourseWorkload.json');

        return request(url).post('/dialogflowFirebaseFulfillment')
            .send(getCourseWorkloadReq)
            .expect(200)
            .expect(response => {
                expect(response.text)
                    .to.be.equal(`{"fulfillmentText":"A disciplina possui 60 horas por semestre!","outputContexts":[]}`);
        });
    });

    /**
     * @user Qual o professor de MAT3458? 
     * @ganimedes A disciplina n√£o possui nenhum professor cadastrado no sistema!
     */
    it("GetCourseTeacher: Should return teachers for course", () => {

        const getCourseTeacherReq = require('./mock/getCourseTeacher-empty.json');

        return request(url).post('/dialogflowFirebaseFulfillment')
            .send(getCourseTeacherReq)
            .expect(200)
            .expect(response => {
                expect(response.text)
                    .to.be.equal(`{"fulfillmentText":"A disciplina n√£o possui nenhum professor cadastrado no sistema!","outputContexts":[]}`);
        });
    });

    /**
     * @user  Quais os horarios de MAT3457?
     * @ganimedes A disciplina n√£o possui nenhum professor cadastrado no sistema!
     */
    it("GetCourseSchedule: Should return schedules for course", () => {

        const getCourseScheduleReq = require('./mock/getCourseSchedule.json');

        return request(url).post('/dialogflowFirebaseFulfillment')
            .send(getCourseScheduleReq)
            .expect(200)
            .expect(response => {
                expect(response.text)
                    .to.be.equal(`{"fulfillmentText":"A turma 01 tem hor√°rio seg √†s 09:20 - 11:00 qua √†s 07:30 - 09:10 . A turma 02 tem hor√°rio qua √†s 15:00 - 16:40 sex √†s 07:30 - 09:10 . A turma 03 tem hor√°rio qua √†s 13:10 - 14:50 sex √†s 09:20 - 11:00 . A turma 04 tem hor√°rio qua √†s 09:20 - 11:00 sex √†s 07:30 - 09:10 . A turma 05 tem hor√°rio qua √†s 07:30 - 09:10 sex √†s 09:20 - 11:00 . A turma 06 tem hor√°rio seg √†s 07:30 - 09:10 qua √†s 09:20 - 11:00 . A turma 07 tem hor√°rio seg √†s 13:10 - 14:50 qui √†s 07:30 - 09:10 . A turma 08 tem hor√°rio seg √†s 09:20 - 11:00 qua √†s 15:00 - 16:40 . A turma 09 tem hor√°rio seg √†s 07:30 - 09:10 qua √†s 13:10 - 14:50 . A turma 10 tem hor√°rio seg √†s 09:20 - 11:00 qua √†s 07:30 - 09:10 . A turma 11 tem hor√°rio seg √†s 07:30 - 09:10 qua √†s 09:20 - 11:00 . A turma 12 tem hor√°rio seg √†s 15:00 - 16:40 qui √†s 09:20 - 11:00 . A turma 20 tem hor√°rio sex √†s 08:20 - 11:50 . ","outputContexts":[]}`);
        });
    });

});
